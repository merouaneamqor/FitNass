generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               Role           @default(USER)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  bio                String?
  city               String?
  isVerified         Boolean        @default(false)
  lastLogin          DateTime?
  phoneNumber        String?
  preferences        Json?
  resetPasswordToken String?
  status             UserStatus     @default(ACTIVE)
  tokenExpiry        DateTime?
  verificationToken  String?
  createdGyms        Gym[]          @relation("GymOwner")
  loginHistory       LoginHistory[]
  notifications      Notification[]
  reviews            Review[]
  favorites          Gym[]          @relation("UserFavorites")
}

model Gym {
  id          String      @id @default(cuid())
  name        String
  description String
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float
  longitude   Float
  phone       String?
  website     String?
  email       String?
  rating      Float       @default(0)
  priceRange  String
  facilities  String[]
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     String
  isVerified  Boolean     @default(false)
  status      GymStatus   @default(ACTIVE)
  viewCount   Int         @default(0)
  owner       User        @relation("GymOwner", fields: [ownerId], references: [id])
  promotions  Promotion[]
  reviews     Review[]
  favoritedBy User[]      @relation("UserFavorites")
}

model Review {
  id        String       @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  gymId     String
  isHelpful Int          @default(0)
  status    ReviewStatus @default(PUBLISHED)
  gym       Gym          @relation(fields: [gymId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

model Promotion {
  id              String          @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  discount        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  gymId           String
  redemptionCount Int             @default(0)
  status          PromotionStatus @default(ACTIVE)
  gym             Gym             @relation(fields: [gymId], references: [id])
}

model LoginHistory {
  id        String   @id @default(cuid())
  ipAddress String?
  device    String?
  browser   String?
  location  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  GYM_OWNER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BANNED
}

enum GymStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  CLOSED
}

enum ReviewStatus {
  PUBLISHED
  PENDING
  REJECTED
  DELETED
}

enum PromotionStatus {
  ACTIVE
  SCHEDULED
  EXPIRED
  CANCELLED
}
