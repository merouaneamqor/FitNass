generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               Role           @default(USER)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  bio                String?
  city               String?
  isVerified         Boolean        @default(false)
  lastLogin          DateTime?
  phoneNumber        String?
  preferences        Json?
  resetPasswordToken String?
  status             UserStatus     @default(ACTIVE)
  tokenExpiry        DateTime?
  verificationToken  String?
  createdClubs       Club[]         @relation("ClubOwner")
  createdGyms        Gym[]          @relation("GymOwner")
  loginHistory       LoginHistory[]
  notifications      Notification[]
  reservations       Reservation[]
  reviews            Review[]
  subscriptions      Subscription[]
  favoriteClubs      Club[]         @relation("UserFavoriteClubs")
  favorites          Gym[]          @relation("UserFavorites")
}

model Gym {
  id          String      @id @default(cuid())
  name        String
  description String
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float
  longitude   Float
  phone       String?
  website     String?
  email       String?
  rating      Float       @default(0)
  priceRange  String
  facilities  String[]
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     String
  isVerified  Boolean     @default(false)
  status      GymStatus   @default(ACTIVE)
  viewCount   Int         @default(0)
  owner       User        @relation("GymOwner", fields: [ownerId], references: [id])
  promotions  Promotion[]
  reviews     Review[]
  favoritedBy User[]      @relation("UserFavorites")
}

model Review {
  id        String       @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  gymId     String?
  isHelpful Int          @default(0)
  status    ReviewStatus @default(PUBLISHED)
  clubId    String?
  club      Club?        @relation("ClubReviews", fields: [clubId], references: [id])
  gym       Gym?         @relation(fields: [gymId], references: [id])
  user      User         @relation(fields: [userId], references: [id])
}

model Promotion {
  id              String          @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  discount        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  gymId           String
  redemptionCount Int             @default(0)
  status          PromotionStatus @default(ACTIVE)
  gym             Gym             @relation(fields: [gymId], references: [id])
}

model LoginHistory {
  id        String   @id @default(cuid())
  ipAddress String?
  device    String?
  browser   String?
  location  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  isRead    Boolean  @default(false)
  type      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Club {
  id           String       @id @default(cuid())
  name         String
  description  String
  address      String
  city         String
  state        String
  zipCode      String
  latitude     Float
  longitude    Float
  phone        String?
  website      String?
  email        String?
  rating       Float        @default(0)
  images       String[]
  facilities   String[]
  openingHours Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ownerId      String
  isVerified   Boolean      @default(false)
  status       ClubStatus   @default(ACTIVE)
  viewCount    Int          @default(0)
  owner        User         @relation("ClubOwner", fields: [ownerId], references: [id])
  reviews      Review[]     @relation("ClubReviews")
  sportFields  SportField[]
  favoritedBy  User[]       @relation("UserFavoriteClubs")
}

model SportField {
  id           String         @id @default(cuid())
  name         String
  description  String
  type         SportFieldType
  surface      String?
  indoor       Boolean        @default(false)
  size         String?
  maxCapacity  Int?
  pricePerHour Decimal
  currency     String         @default("MAD")
  availability Json?
  amenities    String[]
  images       String[]
  clubId       String
  status       FieldStatus    @default(AVAILABLE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  reservations Reservation[]
  club         Club           @relation(fields: [clubId], references: [id], onDelete: Cascade)
}

model Reservation {
  id               String            @id @default(cuid())
  startTime        DateTime
  endTime          DateTime
  status           ReservationStatus @default(PENDING)
  totalPrice       Decimal
  userId           String
  sportFieldId     String
  paymentStatus    PaymentStatus     @default(UNPAID)
  paymentId        String?
  notes            String?
  participantCount Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sportField       SportField        @relation(fields: [sportFieldId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id            String         @id
  name          String
  description   String
  price         Float
  billingCycle  BillingCycle
  features      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  planId          String
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime
  endDate         DateTime
  autoRenew       Boolean            @default(true)
  paymentMethodId String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  payments        PaymentRecord[]
  plan            SubscriptionPlan   @relation(fields: [planId], references: [id])
  user            User               @relation(fields: [userId], references: [id])
}

model PaymentRecord {
  id             String       @id @default(cuid())
  subscriptionId String
  amount         Float
  status         String
  paymentMethod  String
  transactionId  String?
  createdAt      DateTime     @default(now())
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
}

enum Role {
  USER
  ADMIN
  GYM_OWNER
  CLUB_OWNER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  BANNED
}

enum GymStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  CLOSED
}

enum ReviewStatus {
  PUBLISHED
  PENDING
  REJECTED
  DELETED
}

enum PromotionStatus {
  ACTIVE
  SCHEDULED
  EXPIRED
  CANCELLED
}

enum SportFieldType {
  FOOTBALL
  TENNIS
  BASKETBALL
  VOLLEYBALL
  SQUASH
  PADEL
  SWIMMING_POOL
  GOLF
  OTHER
}

enum FieldStatus {
  AVAILABLE
  UNDER_MAINTENANCE
  CLOSED
  UNAVAILABLE
}

enum ClubStatus {
  ACTIVE
  INACTIVE
  PENDING_APPROVAL
  CLOSED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELLED
  EXPIRED
}
